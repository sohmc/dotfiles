# vim: set filetype=sh:

# Set this to something human-readable if the
# machine hostname is not set
# export nice_name=''

# If this is an xterm set the title to user@host:dir
case $- in
*i*)
    case "$TERM" in
    xterm*|rxvt*|screen*)
        color_prompt=yes
        ;;
    *)
        color_prompt=no
        ;;
    esac
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Are you root?
if [ $(id -u) -ne 0 ]; then
    amiroot=no
else
    amiroot=yes
fi

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Set the prompt
#
## set $nice_name somewhere outside of this script if you have an ugly
## machine name, like awsrhlueast1a, and want to name it something nicer
## like sherlock.
if [ -z $nice_name ]; then
    userhost="[ \u@\h ]"
else 
    userhost="[ \u@\h (${nice_name}) ]"
fi;


if [ "$color_prompt" = yes ]; then
    if [ "$amiroot" = yes ]; then
        # Root users get a RED letter prompt
        userprompt="\[$(tput bold)\]\[$(tput setaf 1)\][ \u@\h ]"
    else
        # Normal users get a WHITE letter prompt
        userprompt="\[$(tput bold)\]\[$(tput setaf 7)\][ \u@\h ]"
    fi


    if [ -z $nice_name ]; then
        PS1="${userprompt} \[$(tput setaf 3)\]\w\n\[$(tput setaf 6)\]\\$ \[$(tput sgr0)\]"
    else
        PS1="\[$(tput bold)\]\[$(tput setaf 7)\][ \u@\h (${nice_name}) ] \[$(tput setaf 3)\]\w\n\[$(tput setaf 6)\]\\$ \[$(tput sgr0)\]"
    fi

    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
else
    if [ -z $nice_name ]; then
        PS1="[\u@\h]\$ \w\n\$ "
    else
        PS1="[\u@\h (${nice_name})]\$ \w\n\$ "
    fi
fi


# Where am I?
# Courtesy of
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-which-directory-it-is-stored-in
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo DIR set to $DIR


# ALIASES:
# The ones in the repo will get sourced first.  To override them, use
# ~/.local_aliases
if [ -f $DIR/bash_aliases ]; then
    . $DIR/bash_aliases
fi
    
# If ~/.local_aliases exists, then source it last.
if [ -f $HOME/.local_aliases ]; then
    . $HOME/.local_aliases
fi

# git bash prompt; attempt to load the personalized version first
if [ -f $DIR/bash-git-prompt/gitprompt.sh ]; then
    . $DIR/bash-git-prompt/gitprompt.sh
    GIT_PROMPT_ONLY_IN_REPO=1
    echo Using personalized bash-bit-prompt
elif [ -f $HOME/.bash-git-prompt/gitprompt.sh ]; then
#           v -- Watch this dot!
    . $HOME/.bash-git-prompt/gitprompt.sh
    GIT_PROMPT_ONLY_IN_REPO=1
    echo Using local bash-git-prompt
fi


# set environment options
set -o noclobber
export history_write_timestamps=1


#### SET THE PATH ####
# Most of the path should already be set by the ~/.bashrc or system
# bashrc.  Make sure that you don't overwrite something or introduce
# something you don't intend.
export PATH=$PATH:$HOME/usr/bin:$HOME/usr/local/bin:$HOME/.local/bin


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
